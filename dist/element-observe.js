var observeElement=function(e){"use strict";return e.observeElement=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=e.el,t=e.type,n=e.offset,o=void 0===n?.5:n,i=e.onEnter,s=void 0===i?null:i,c=e.onLeave,a=void 0===c?null:c,g=e.rootMargin,l=void 0===g?"0px":g,u={root:null,rootMargin:l,threshold:""};switch(t){case"triggerInOutViewport":u.threshold=[0,1];break;case"triggerOnce":u.threshold=o;break;case"scrollProgress":u.threshold=f(0,1,.01)}var h=function(e,r){e.forEach((function(e){switch(t){case"triggerInOutViewport":e.isIntersecting&&s(),!e.isIntersecting&&a&&a();break;case"triggerOnce":e.isIntersecting&&(s(e.target),r.unobserve(e.target));break;case"scrollProgress":var n;n=e.intersectionRect.height/e.boundingClientRect.height,s(n)}}))},v=new IntersectionObserver(h,u);function f(e,r,t){var n=(r-e)/t;return Array.from({length:n+1},(function(r,n){return n*t+e}))}NodeList.prototype.isPrototypeOf(r)?r.forEach((function(e){return v.observe(e)})):v.observe(r)},e}({});
